import{_ as a,a as e,o as t,aj as i}from"./chunks/framework.BjhQB2K5.js";const u=JSON.parse('{"title":"多租户（v8.0新增）","description":"","frontmatter":{},"headers":[],"relativePath":"src/guide/tenant.md","filePath":"src/guide/tenant.md","lastUpdated":1744512083000}'),s={name:"src/guide/tenant.md"},n=i(`<h1 id="多租户-v8-0新增" tabindex="-1">多租户（v8.0新增） <a class="header-anchor" href="#多租户-v8-0新增" aria-label="Permalink to &quot;多租户（v8.0新增）&quot;">​</a></h1><p>多租户（Multi-tenancy）是一种软件架构模式，允许单个应用实例服务多个租户（客户组织）。每个租户的数据是相互隔离的，但共享同一个应用程序代码和基础设施。</p><h1 id="主要特点" tabindex="-1">主要特点 <a class="header-anchor" href="#主要特点" aria-label="Permalink to &quot;主要特点&quot;">​</a></h1><ul><li>数据隔离: 确保不同租户之间的数据严格分离，互不可见</li><li>资源共享: 多个租户共享同一套应用程序代码和基础设施</li><li>独立配置: 每个租户可以有自己的个性化配置和定制化需求</li><li>成本优化: 通过资源共享降低运营和维护成本</li></ul><h1 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h1><h2 id="_1、数据隔离" tabindex="-1">1、数据隔离 <a class="header-anchor" href="#_1、数据隔离" aria-label="Permalink to &quot;1、数据隔离&quot;">​</a></h2><p>多租户的数据隔离有许多种方案，但最为常见的是以列进行隔离的方式。Cool Admin 通过在TenantEntity中加入指定的列（租户ID tenantId）对数据进行隔离。</p><p>如果登录的用户token信息有携带tenantId，则框架会自动注入tenantId。</p><h1 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h1><h2 id="_1、开启多租户" tabindex="-1">1、开启多租户 <a class="header-anchor" href="#_1、开启多租户" aria-label="Permalink to &quot;1、开启多租户&quot;">​</a></h2><p>框架默认关闭多租户，需要手动开启 enable修改为 true</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Cool相关配置</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  multi-tenant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 是否开启多租户，默认关闭</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><p>关于tenantId的使用请参考 <a href="https://mybatis-flex.com/zh/core/multi-tenancy.html" target="_blank" rel="noreferrer">mybatis-flex</a></p><h2 id="_2、继承对象调整" tabindex="-1">2、继承对象调整 <a class="header-anchor" href="#_2、继承对象调整" aria-label="Permalink to &quot;2、继承对象调整&quot;">​</a></h2><p>对于需要租户隔离的表，需要对应的表实体继承对象进行调整 BaseEntity -&gt; TenantEntity</p>`,15),l=[n];function h(r,o,d,p,c,k){return t(),e("div",null,l)}const m=a(s,[["render",h]]);export{u as __pageData,m as default};
