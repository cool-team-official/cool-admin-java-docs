import{_ as s,c as i,o as a,a5 as n,a9 as e,aa as l}from"./chunks/framework.C_oE5szm.js";const F=JSON.parse('{"title":"开发方式","description":"","frontmatter":{},"headers":[],"relativePath":"src/guide/dev.md","filePath":"src/guide/dev.md","lastUpdated":1721036629000}'),t={name:"src/guide/dev.md"},h=n('<h1 id="开发方式" tabindex="-1">开发方式 <a class="header-anchor" href="#开发方式" aria-label="Permalink to &quot;开发方式&quot;">​</a></h1><p>Cool Admin 推荐两种快速开发方式，可以大大节省开发时间，降低开发成本，提高开发效率。</p><h2 id="ai-全自动" tabindex="-1">Ai 全自动 <a class="header-anchor" href="#ai-全自动" aria-label="Permalink to &quot;Ai 全自动&quot;">​</a></h2><p>零代码开发(非低代码)，通过微调大模型学习框架特有写法，实现简单功能从 Api 接口到前端页面的一键生成</p><p><img src="'+e+`" alt="" data-zoomable=""></p><p>开发过程只需点一点，调一调，不用写一行代码</p><p><a href="https://www.bilibili.com/video/BV1Hm421g7Br/?" target="_blank" rel="noreferrer">B 站视频教程</a></p><h2 id="半自动" tabindex="-1">半自动 <a class="header-anchor" href="#半自动" aria-label="Permalink to &quot;半自动&quot;">​</a></h2><p>只需三步，创建实体类生成表，生成后端代码，生成前端代码</p><ul><li>编写实体类，重启生成表；</li><li>运行代码生成器，生成 Service、Controller 等</li></ul><p>文件：<code>src/test/java/com/cool/CoolAdminJavaApplicationTests.java</code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CoolCodeGeneratorTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CodeGenerator codeGenerator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CodeGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        codeGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CodeModel codeModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CodeModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        codeModel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CodeTypeEnum.ADMIN);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        codeModel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;测试CURD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        codeModel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        codeModel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DemoEntity.class);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        codeGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(codeModel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        codeGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(codeModel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        codeGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(codeModel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>自动生成前端页面，通过管理后台菜单管理的快速创建即可生成</li></ul><p>Ui 组件会根据字段智能选择</p><p><img src="`+l+'" alt=""></p>',15),p=[h];function k(d,r,E,o,c,g){return a(),i("div",null,p)}const _=s(t,[["render",k]]);export{F as __pageData,_ as default};
